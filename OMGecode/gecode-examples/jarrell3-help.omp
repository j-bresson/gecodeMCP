; OM File Header - Saved 2010/06/17 10:35:05
; (6.010301 :patc (om-make-point 39 378) (om-make-point 274 67) (om-make-point 1166 785) "" 183 0 "2009/09/15 9:39:43" "2009/12/17 0:35:58")
; End File Header
; External resources 
; (list (list (quote :text) "../../../../../../../tmp/tmpjarrell2"))
(in-package :om)(load-lib-for (quote ("OMGecode")))(setf *om-current-persistent* (om-load-patch1 "jarrell3-help" (quote ((om-load-boxcomment "comment" (om-make-point 282 33) (quote "model (autorise tous les intervalles ou seulement ceuc des cellules)") "" (om-make-point 426 268) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "loop input" "OPLIST" nil))) (om-make-point 905 251) nil nil nil (list (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 159 61) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "" "LONSET" (list 0 140)) (om-load-inputfun (quote input-funbox) "" "LDUR" (list 120)) (om-load-inputfun (quote input-funbox) "" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "" "LEGATO" 0))) (om-make-point 157 108) (om-make-point 130 65) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 1 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 23 89) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 156 203) nil nil nil nil 3) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 300 250) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 139 289) nil nil nil 0)) (quote ((2 0 0 0 nil 0) (0 0 1 1 nil 0) (4 0 2 0 nil 0) (1 0 3 0 nil 0) (3 1 5 0 nil 0) (3 0 6 0 nil 0))) 1 "omloop" nil) (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CHORD-SEQS" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 639 383) (om-make-point 282 344) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6000) (6000) (6000) (6000) (6500) (6800) (7600) (7100) (6800) (6000) (6600) (6000))) :lonset (quote (0 140 280 420 560 700 840 980 1120 1260 1400 1540 1680 1820)) :ldur (quote ((120) (120) (120) (120) (120) (120) (120) (120) (120) (120) (120) (120) (120))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6000) (6000) (6500) (6600) (6500) (6800) (7600) (7100) (6800) (6000) (6600) (6000))) :lonset (quote (0 140 280 420 560 700 840 980 1120 1260 1400 1540 1680 1820)) :ldur (quote ((120) (120) (120) (120) (120) (120) (120) (120) (120) (120) (120) (120) (120))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 1157 738) 0 1000 nil 57/100 (quote :microplayer) 1 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g)) 24 2)) t nil nil nil) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 716 265) nil nil "l" nil 1) (om-load-boxcall (quote lispfun) "MAPCAR1" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 747 291) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 405 294) (om-make-point 18 28) 0 "0" nil) (om-load-boxcall (quote genfun) "JARRELL3" (quote jarrell3) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "N" 15) (om-load-inputfun (quote input-funbox) "no documentation" "CELLS" (list 1 (list 1 -1) (list 2 (list 2 -2)))) (om-load-inputfun (quote input-funbox) "no documentation" "CHORD" (list 60 61 62 63 64 65 66 67)) (om-load-inputfun (quote input-funbox) "no documentation" "FIRST-NOTE" 60) (om-load-inputfun (quote input-funbox) "no documentation" "LAST-NOTE" 60) (om-load-inputfun (quote input-funbox) "no documentation" "N_SOLUTIONS" 1) (om-load-inputfun (quote input-keyword) "Choose from this list (:filename :searchengine :model :timelimit)" "Keyword input" (quote :model)) (om-load-inputfun (quote input-keyword) "Choose from this list (:filename :searchengine :model :timelimit)" "Keyword input" (quote :filename)))) (om-make-point 125 357) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 678 91) (om-make-point 222 30) (make-pathname :directory (quote (:absolute "tmp")) :device nil :host nil :name "tmpjarrell2" :type nil) "#P\"/tmp/tmpjarrell2\"" nil) (om-load-boxcomment "comment" (om-make-point 282 33) (quote "nombre de solutions à écrire dans le fichier :") "" (om-make-point 424 231) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 724 189) (om-make-point 70 50) (load-textfile (make-pathname :directory (quote (:absolute "tmp")) :device nil :host nil :name "tmpjarrell2" :type nil) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 451 310) (om-make-point 222 30) "/tmp/tmpjarrell2" "\"/tmp/tmpjarrell2\"" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 388 238) (om-make-point 18 28) 24 "24" nil) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "result length") "" (om-make-point 114 16) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 63 22) (om-make-point 28 30) 13 "13" nil) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "final note") "" (om-make-point 380 190) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "initial note") "" (om-make-point 358 161) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "pitches") "" (om-make-point 353 114) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "intervalic cells") "" (om-make-point 329 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 151 414) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 340)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 200)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 23 450) (om-make-point 582 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6000) (6000) (6500) (6600) (6500) (6800) (7600) (7100) (6800) (6000) (6600) (6000))) :lonset (quote (0 340 680 1020 1360 1700 2040 2380 2720 3060 3400 3740 4080 4420)) :ldur (quote ((200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (microplay palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player)) (list nil 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 821 315) 0 1000 nil 43/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 355 199) (om-make-point 18 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 341 166) (om-make-point 18 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 203 114) (om-make-point 149 34) (list 60 65 66 68 71 76 82) "(60 65 66 68 71 76 82)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 99 73) (om-make-point 230 34) (list (list 1 (list -3 -8)) (list 1 (list 3 8)) (list 1 (list 6 -6)) (list 0 (list 1))) "((1(-3 -8))(1(3 8))(1(6 -6))(0(1)))" nil))) (quote ((4 0 1 0 nil 0) (1 0 2 1 nil 0) (3 0 4 0 nil 0) (9 1 4 1 nil 0) (13 0 6 0 nil 0) (23 0 6 1 nil 0) (22 0 6 2 nil 0) (21 0 6 3 nil 0) (20 0 6 4 nil 0) (11 0 6 5 nil 0) (5 0 6 6 nil 0) (10 0 6 7 nil 0) (7 0 9 0 nil 0) (6 0 18 0 nil 0) (18 0 19 1 nil 0))) nil 6.010006))
