; OM File Header - Saved 2010/06/17 10:35:05
; (6.07 :patc (om-make-point 155 338) (om-make-point 50 47) (om-make-point 931 805) "" 183 0 "2009/09/17 17:45:20" "2009/11/06 0:39:27")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "probleme-a2" (quote ((om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 379 357) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote genfun) "JARRELL3" (quote jarrell3) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "N" 15) (om-load-inputfun (quote input-funbox) "no documentation" "CELLS" (list 1 (list 1 -1) (list 2 (list 2 -2)))) (om-load-inputfun (quote input-funbox) "no documentation" "CHORD" (list 60 61 62 63 64 65 66 67)) (om-load-inputfun (quote input-funbox) "no documentation" "FIRST-NOTE" 60) (om-load-inputfun (quote input-funbox) "no documentation" "LAST-NOTE" 60) (om-load-inputfun (quote input-funbox) "no documentation" "N_SOLUTIONS" 1))) (om-make-point 324 397) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 237 392) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 197 390) nil nil nil nil 1) (om-load-boxcall (quote genfun) "JARRELL3" (quote jarrell3) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "N" 15) (om-load-inputfun (quote input-funbox) "no documentation" "CELLS" (list 1 (list 1 -1) (list 2 (list 2 -2)))) (om-load-inputfun (quote input-funbox) "no documentation" "CHORD" (list 60 61 62 63 64 65 66 67)) (om-load-inputfun (quote input-funbox) "no documentation" "FIRST-NOTE" 60) (om-load-inputfun (quote input-funbox) "no documentation" "LAST-NOTE" 60) (om-load-inputfun (quote input-funbox) "no documentation" "N_SOLUTIONS" 1))) (om-make-point 81 389) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 199 537) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 316 268) (om-make-point 18 28) 16 "16" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 100))) (om-make-point 579 211) nil nil nil nil 1) (om-load-editor-box1 "CHORD1" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "" "LCHAN" (list 1)))) (om-make-point 646 92) (om-make-point 55 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900 6000 6200 6300 6500 6600 7000 7100 7200 7300 7600)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (80 80 80 80 80 80 80 80 80 80 80)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (5 0 0 0 0 0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 378 293) (om-make-point 902 246) 3 1000 nil 1 (quote :midishare) 1 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 142 349) (om-make-point 18 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 116 351) (om-make-point 18 28) 0 "0" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 100))) (om-make-point 660 210) nil nil nil nil 1) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "" "LCHAN" (list 1)))) (om-make-point 530 84) (om-make-point 55 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6500 6600 6800 7100 7600 8200)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) thechord) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 770 335) 3 1000 nil 1 (quote :midishare) 1 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 371 61) (quote "enchainement de champs harmoniques") "" (om-make-point 84 27) nil (om-make-color 0.07356961 5.3328276E-4 1.0) (om-make-font "Bank Gothic" 18 :family "Bank Gothic" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "result length") "" (om-make-point 110 260) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 83 270) (om-make-point 18 28) 15 "15" nil) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "pitches") "" (om-make-point 575 52) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "intervalic cells") "" (om-make-point 253 187) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 205 584) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 444)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 200)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 29 633) (om-make-point 882 102) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6800) (6500) (7600) (6500) (6800) (7600) (6500) (7100) (6500) (7100) (6000) (7100) (6800) (6000) (6000) (6300) (6000) (6300) (6000) (6300) (7100) (6500) (7100) (6500) (6200) (7300) (6200) (7300) (7000) (6200))) :lonset (quote (0 444 888 1332 1776 2220 2664 3108 3552 3996 4440 4884 5328 5772 6216 6660 7104 7548 7992 8436 8880 9324 9768 10212 10656 11100 11544 11988 12432 12876 13320 13764)) :ldur (quote ((200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (microplay palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player)) (list nil 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 821 315) 0 1000 nil 43/100 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 80 220) (om-make-point 443 33) (list (list 1 (list -3 -8)) (list 1 (list 3 8)) (list 1 (list 6 -6)) (list 1 (list -6 6)) (list 1 (list 11 -11)) (list 1 (list -11 11)) (list 1 (list -3 11))) "((1(-3 -8))(1(3 8))(1(6 -6))(1(-6 6))(1(11 -11))(1(-11 11))(1(-3 11)))" nil))) (quote ((6 0 1 0 nil 0) (20 0 1 1 nil 0) (11 0 1 2 nil 0) (2 0 1 3 ((om-make-point 247 432) (om-make-point 279 433) (om-make-point 280 399) (om-make-point 359 399) (om-make-point 360 397)) 0) (0 0 1 4 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (15 0 4 0 nil 0) (20 0 4 1 nil 0) (7 0 4 2 nil 0) (10 0 4 3 nil 0) (9 0 4 4 nil 0) (4 0 5 0 ((om-make-point 109 445) (om-make-point 110 530) (om-make-point 212 528) (om-make-point 212 537)) 0) (1 0 5 1 nil 0) (12 1 7 0 nil 0) (8 1 11 0 nil 0) (5 0 18 0 nil 0) (18 0 19 1 nil 0))) nil 6.07))
