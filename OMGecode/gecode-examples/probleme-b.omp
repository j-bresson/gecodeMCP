; OM File Header - Saved 2010/06/17 10:35:05
; (6.010301 :patc (om-make-point 159 410) (om-make-point 295 39) (om-make-point 1145 725) "" 183 0 "2009/09/08 13:06:39" "2009/11/06 20:19:26")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "probleme-b" (quote ((om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 343 394) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "JARRELL3" (quote jarrell3) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "N" 15) (om-load-inputfun (quote input-funbox) "no documentation" "CELLS" (list 1 (list 1 -1) (list 2 (list 2 -2)))) (om-load-inputfun (quote input-funbox) "no documentation" "CHORD" (list 60 61 62 63 64 65 66 67)) (om-load-inputfun (quote input-funbox) "no documentation" "FIRST-NOTE" 60) (om-load-inputfun (quote input-funbox) "no documentation" "LAST-NOTE" 60) (om-load-inputfun (quote input-funbox) "no documentation" "N_SOLUTIONS" 1) (om-load-inputfun (quote input-keyword) "Choose from this list (:timelimit :model :searchengine :filename)" "Keyword input" (quote :timelimit)))) (om-make-point 227 427) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 597 45) (quote "dificult problem (gecode takes 4 minutes to solve it !)") "" (om-make-point 76 73) nil (om-make-color 1.0 0.07060659 0.0) (om-make-font "Bank Gothic" 18 :family "Bank Gothic" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 81 188) (om-make-point 292 35) (list (list 2 (list -11 13 1)) (list 4 (list 13 -11)) (list 2 (list 16 -14 1))) "((2(-11 13 1))(4(13 -11))(2(16 -14 1)))" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 251 324) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 581 121) (om-make-point 20 28) 81 "81" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 551 124) (om-make-point 20 28) 37 "37" nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 578 211) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 37) (om-load-inputfun (quote input-funbox) "end " "END" 81) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 557 151) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 270 355) (om-make-point 18 28) 0 "0" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 100))) (om-make-point 575 395) nil nil nil nil 1) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "" "LCHAN" (list 1)))) (om-make-point 567 247) (om-make-point 92 149) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 1 (quote :midishare) 1 nil 1000 3 (om-make-point 770 335) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 798 63) (quote "cf. Courtot / Jarrell \"L'utilisation de la CAO dans Congruences\", Ircam 1989, p.47") "" (om-make-point 79 18) nil (om-make-color 0.07356961 5.3328276E-4 1.0) (om-make-font "Bank Gothic" 18 :family "Bank Gothic" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "result length") "" (om-make-point 46 241) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 83 270) (om-make-point 22 29) 20 "20" nil) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "intervalic cells") "" (om-make-point 169 154) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 248 499) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 200)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 12 548) (om-make-point 1069 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3700) (3800) (5100) (4000) (5300) (4200) (5500) (4400) (5700) (5800) (7400) (6000) (6100) (7700) (6300) (6400) (7700) (6600) (7900) (8000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000)) :ldur (quote ((200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode microplay)) (list (quote :midishare) 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 43/100 nil 1000 0 (om-make-point 821 315) (om-make-point 437 227) 0 1 (quote t) nil 0 nil)) t nil nil nil))) (quote ((14 0 1 0 nil 0) (3 0 1 1 nil 0) (10 0 1 2 nil 0) (4 0 1 3 nil 0) (9 0 1 4 nil 0) (0 0 1 6 nil 0) (8 0 7 0 nil 0) (6 0 8 0 nil 0) (5 0 8 1 nil 0) (11 1 10 0 nil 0) (7 0 11 1 nil 0) (1 0 16 0 nil 0) (16 0 17 1 nil 0))) nil 6.010006))
