; OM File Header - Saved 2010/06/17 10:35:05
; (6.020102 :patc (om-make-point 306 23) (om-make-point 50 50) (om-make-point 1074 609) "" 183 0 "2010/06/14 22:36:45" "2010/06/17 10:34:53")
; End File Header
(in-package :om)(load-lib-for (quote ("OMGecode")))(setf *om-current-persistent* (om-load-patch1 "vps-constraints2-help" (quote ((om-load-boxcall (quote lispfun) "GET-GIL" (quote chroma::get-gil) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 911 604) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GET-SPL" (quote chroma::get-spl) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 826 642) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GET-CIL" (quote chroma::get-cil) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 784 634) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GET-CS-VPS" (quote chroma::get-cs-vps) (quote ((om-load-inputfun (quote input-funbox) "CIL" "CIL" nil))) (om-make-point 977 636) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GET-CS" (quote chroma::get-cs) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 947 646) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 154 30) (quote "stability coef limits") "" (om-make-point 302 195) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "CHORD-SEQS" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 28 417) (om-make-point 283 281) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6400) (9600))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000) (1000) (1000))) :lvel (quote ((100) (100) (100))) :loffset (quote ((0) (0) (0))) :lchan (quote ((1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7200) (9600))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000) (1000) (1000))) :lvel (quote ((100) (100) (100))) :loffset (quote ((0) (0) (0))) :lchan (quote ((1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7600) (9600))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000) (1000) (1000))) :lvel (quote ((100) (100) (100))) :loffset (quote ((0) (0) (0))) :lchan (quote ((1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (8000) (9600))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000) (1000) (1000))) :lvel (quote ((100) (100) (100))) :loffset (quote ((0) (0) (0))) :lchan (quote ((1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (8400) (9600))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000) (1000) (1000))) :lvel (quote ((100) (100) (100))) :loffset (quote ((0) (0) (0))) :lchan (quote ((1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (9200) (9600))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000) (1000) (1000))) :lvel (quote ((100) (100) (100))) :loffset (quote ((0) (0) (0))) :lchan (quote ((1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0)) ((0) (0) (0)) ((0) (0) (0)) ((0) (0) (0)) ((0) (0) (0)) ((0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (list (quote g) (quote g) (quote g) (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1 1 1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 222 203) (om-make-point 52 43) "(0 1)" "\"(0 1)\"$" nil) (om-load-boxcall (quote lispfun) "GET-SURFACE" (quote chroma::get-surface) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 720 603) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "GET-DENSITY" (quote chroma::get-density) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 874 654) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "DENS_VPS" (quote chroma::dens_vps) (quote ((om-load-inputfun (quote input-funbox) "VPS" "VPS" nil))) (om-make-point 632 606) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 154 30) (quote "density limits") "" (om-make-point 195 160) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 109 163) (om-make-point 81 30) "(0.01 0.1)" "\"(0.01 0.1)\"" nil) (om-load-boxcall (quote lispfun) "CS_VPS" (quote chroma::cs_vps) (quote ((om-load-inputfun (quote input-funbox) "VPS" "VPS" nil))) (om-make-point 497 607) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SURF-S_VPS" (quote chroma::surf-s_vps) (quote ((om-load-inputfun (quote input-funbox) "VPS" "VPS" nil))) (om-make-point 564 607) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 404 321) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 450 351) nil nil nil nil 1) (om-load-editor-box1 "SPL" (quote spl) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "THE-LIST" (list (quote chroma::do2) (quote chroma::do3) (quote chroma::do5))))) (om-make-point 388 459) (om-make-point 436 88) (if (find-class (quote spl) nil) (make-instance (quote spl) :the-list (list (append nil (cons "DO4" 0)) (append nil (cons "SOLd5" 0)) (append nil (cons "DO7" 0))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 500 300))) t nil nil nil) (om-load-boxcall (quote genfun) "MIDI->PCH" (quote midi->pch) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "P" nil))) (om-make-point 438 393) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 48 269) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "loop input" "OPLIST" nil))) (om-make-point 31 308) nil nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 156 509) nil nil nil nil 3) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "" "LEGATO" 0))) (om-make-point 43 359) (om-make-point 812 109) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6700) (6100) (6600) (6200) (6500) (6300) (6400) (6100) (6500) (6200) (6700) (6000) (6600) (6400) (6300) (6100) (6500) (6400) (6200) (6700) (6000) (6600) (6300))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midishare) 1 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 48 117) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "something" "OP" nil))) (om-make-point 194 600) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "OP" nil))) (om-make-point 96 592) nil nil nil 0)) (quote ((1 0 0 0 nil 0) (2 0 1 1 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "omloop" nil) (om-load-boxcomment "comment" (om-make-point 154 30) (quote "nombre de solutions") "" (om-make-point 103 132) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 83 136) (om-make-point 21 30) 6 "6" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 54 103) (om-make-point 21 30) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 115 24) (quote "note finale") "" (om-make-point 84 97) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 115 24) (quote "note initiale") "" (om-make-point 59 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 29 74) (om-make-point 28 30) 60 "60" nil) (om-load-boxcomment "comment" (om-make-point 136 22) (quote "nombre de notes") "" (om-make-point 38 36) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 11 39) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote genfun) "VPS-G" (quote vps-g) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "NNOTES" nil) (om-load-inputfun (quote input-funbox) "no documentation" "DISTANCE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "NCHORDS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SOLUTIONS" nil) (om-load-inputfun (quote input-keyword) "no documentation" "cs" (quote :cs)) (om-load-inputfun (quote input-keyword) "no documentation" "density" (quote :density)))) (om-make-point 39 209) nil nil nil nil 1))) (quote ((17 0 0 0 nil 0) (17 0 1 0 nil 0) (17 0 2 0 nil 0) (20 0 6 1 nil 0) (17 0 8 0 nil 0) (17 0 10 0 nil 0) (17 0 13 0 nil 0) (17 0 14 0 nil 0) (15 0 16 0 nil 0) (29 0 16 1 nil 0) (18 0 17 1 nil 0) (16 0 18 0 nil 0) (29 0 19 0 nil 0) (19 0 20 0 nil 0) (28 0 29 0 ((om-make-point 19 67) (om-make-point 19 138) (om-make-point 20 170) (om-make-point 48 209)) 0) (26 0 29 1 nil 0) (23 0 29 2 nil 0) (22 0 29 3 nil 0) (7 0 29 4 nil 0) (12 0 29 5 nil 0))) nil 6.020102))
