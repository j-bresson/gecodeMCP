; OM File Header - Saved 2010/06/17 10:35:05
; (6.07 :patc (om-make-point 42 319) (om-make-point 294 44) (om-make-point 1023 592) "" 183 0 "2009/09/07 23:18:16" "2009/09/15 9:33:57")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "jarrell2-help" (quote ((om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 678 91) (om-make-point 222 30) (make-pathname :directory (quote (:absolute "tmp")) :device nil :name "tmpjarrell2" :type nil) "#P\"/tmp/tmpjarrell2\"" nil) (om-load-boxcomment "comment" (om-make-point 282 33) (quote "nombre de solutions à écrire dans le fichier :") "" (om-make-point 424 231) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 725 189) (om-make-point 70 50) (load-textfile (make-pathname :directory (quote (:absolute "tmp")) :device nil :name "tmpjarrell2" :type nil) (quote textfile) "supersede" "text") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 451 275) (om-make-point 222 30) "/tmp/tmpjarrell2" "\"/tmp/tmpjarrell2\"" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 390 255) (om-make-point 18 28) 4 "4" nil) (om-load-boxcall (quote genfun) "JARRELL2" (quote jarrell2) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "N" nil) (om-load-inputfun (quote input-funbox) "no documentation" "S1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "S2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "I1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "I2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "I3" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FILENAME" nil))) (om-make-point 163 313) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "result length") "" (om-make-point 114 16) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 63 22) (om-make-point 18 28) 20 "20" nil) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "final note") "" (om-make-point 380 190) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "initial note") "" (om-make-point 358 161) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "pitches") "" (om-make-point 353 114) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 40) (quote "intervalic cells") "" (om-make-point 329 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 191 373) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 200)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 1 421) (om-make-point 963 106) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (6800) (7600) (6800) (6500) (7100) (6500) (7100) (6500) (7100) (6500) (7100) (6500) (7100) (6500) (7100) (6500) (7100) (6800) (6000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000)) :ldur (quote ((200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200) (200))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode microplay)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 43/100 nil 1000 0 (om-make-point 821 315) (om-make-point 400 20) 0 1 (quote t) nil 0 nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 355 199) (om-make-point 18 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 341 166) (om-make-point 18 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 203 114) (om-make-point 149 34) (list 60 65 66 68 71 76 82) "(60 65 66 68 71 76 82)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 99 73) (om-make-point 230 34) (list (list 1 (list -3 -8)) (list 1 (list 3 8)) (list 1 (list 6 -6))) "((1(-3 -8))(1(3 8))(1(6 -6)))" nil))) (quote ((0 0 2 0 nil 0) (7 0 5 0 nil 0) (17 0 5 1 nil 0) (16 0 5 2 nil 0) (15 0 5 3 nil 0) (14 0 5 4 nil 0) (4 0 5 5 nil 0) (3 0 5 6 nil 0) (5 0 12 0 nil 0) (12 0 13 1 nil 0))) nil 6.07))
