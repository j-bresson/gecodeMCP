; OM File Header - Saved 2010/06/17 10:35:05
; (6.010006 :patc (om-make-point 479 209) (om-make-point 349 37) (om-make-point 1112 669) "" 183 0 "2010/02/05 15:32:13" "2010/02/05 19:53:03")
; End File Header
(in-package :om)(load-lib-for (quote ("OMGecode")))(setf *om-current-persistent* (om-load-patch1 "gechord-simple" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 561 153) (om-make-point 164 30) (list (list 1 3) (list 1 4) (list 0 8) (list 0 1) (list 0 2)) "((1 3)(1 4)(0 8)(0 1)(0 2))" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 424 229) (om-make-point 21 30) 0 "0" nil) (om-load-boxcomment "comment" (om-make-point 255 64) (quote "0 : uniquement intervalles successifs$1 : tous") "" (om-make-point 486 231) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 457 247) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 324 183) (om-make-point 171 30) (list (list 1 5) (list 1 1) (list 0 4) (list 0 2) (list 0 12)) "((1 5)(1 1)(0 4)(0 2)(0 12))" nil) (om-load-boxcomment "comment" (om-make-point 270 36) (quote "contenant les intervalles suivants") "" (om-make-point 281 134) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 108 34) (quote " accords de") "" (om-make-point 110 125) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 360 367) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GECHORD-G" (quote gechord-g) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SIZE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "CELLS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FIRST-NOTE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LAST-NOTE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SOLUTIONS" nil) (om-load-inputfun (quote input-keyword) "Choose from this list (:timelimit)" "Keyword input" (quote :timelimit)) (om-load-inputfun (quote input-keyword) "Choose from this list (:timelimit :model)" "Keyword input" (quote :model)))) (om-make-point 351 304) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 706 292) (om-make-point 28 30) 60 "60" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 720 325) (om-make-point 28 30) 73 "73" nil) (om-load-boxcomment "comment2" (om-make-point 100 40) (quote "initial note") "" (om-make-point 744 282) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 100 40) (quote "final note") "" (om-make-point 744 316) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 42 433) (om-make-point 971 151) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6300 6700 7300) (6000 6300 6900 7300) (6000 6400 6700 7300) (6000 6400 7000 7300) (6000 6600 6900 7300) (6000 6600 7000 7300))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 664 352) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 108 34) (quote "0 : tous") "" (om-make-point 57 172) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 733 91) (quote "regles harmoniques") "" (om-make-point 32 6) nil (om-make-color 0.088718415 0.0 1.0) (om-make-font "Bank Gothic" 36 :family "Bank Gothic" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 108 34) (quote "sons") "" (om-make-point 217 127) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 67 132) (om-make-point 28 30) 20 "20" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 200 133) (om-make-point 21 30) 4 "4" nil))) (quote ((8 0 7 0 nil 0) (18 0 8 0 nil 0) (0 0 8 1 nil 0) (9 0 8 2 nil 0) (10 0 8 3 nil 0) (17 0 8 4 nil 0) (1 0 8 5 nil 0) (3 0 8 6 nil 0) (7 0 13 1 nil 0))) nil 6.010006))
