; OM File Header - Saved 2010/06/17 10:35:05
; (6.020102 :patc (om-make-point 38 193) (om-make-point 50 50) (om-make-point 1213 714) "" 183 0 "2010/01/28 23:11:03" "2010/06/07 17:42:33")
; End File Header
(in-package :om)(load-lib-for (quote ("OMGecode")))(setf *om-current-persistent* (om-load-patch1 "gechord-help" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 713 284) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 402 159) (om-make-point 194 43) (list (list 0 1) (list 0 5) (list 3 6) (list 0 2) (list 2 4) (list 0 12)) "((0 1)(0 5)(3 6)(0 2)(2 4)(0 12)$)" nil) (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 360 367) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GECHORD-G" (quote gechord-g) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SIZE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "CELLS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FIRST-NOTE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LAST-NOTE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SOLUTIONS" nil) (om-load-inputfun (quote input-keyword) "no documentation" "model" (quote :model)))) (om-make-point 351 304) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 706 145) (om-make-point 28 30) 60 "60" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 720 178) (om-make-point 21 30) 0 "0" nil) (om-load-boxcomment "comment2" (om-make-point 100 40) (quote "initial note") "" (om-make-point 744 135) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 100 40) (quote "final note") "" (om-make-point 744 169) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 93 458) (om-make-point 971 151) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6600 7000 7600 8000 8600))) :lonset (quote (0 1000)) :ldur (quote ((1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.020102 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.020102 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 243/100 nil 1000 0 (om-make-point 664 352) (om-make-point 222 78) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 108 34) (quote "intervalles") "" (om-make-point 312 107) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 418 113) (om-make-point 108 30) (list (list 1 3) (list 2 4) (list 3 1)) "((1 3)(2 4)(3 1))" nil) (om-load-boxcomment "comment" (om-make-point 733 91) (quote "regles harmoniques") "" (om-make-point 45 0) nil (om-make-color 0.088718415 0.0 1.0) (om-make-font "Bank Gothic" 36 :family "Bank Gothic" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 116 32) (quote "nombre de solutions") "" (om-make-point 579 186) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 108 34) (quote "nombre de notes") "" (om-make-point 47 103) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 467 252) (om-make-point 28 30) 12 "12" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 159 118) (om-make-point 21 30) 6 "6" nil))) (quote ((3 0 2 0 nil 0) (15 0 3 0 nil 0) (1 0 3 1 nil 0) (4 0 3 2 nil 0) (5 0 3 3 nil 0) (14 0 3 4 nil 0) (0 0 3 5 nil 0) (2 0 8 1 nil 0))) nil 6.020102))
