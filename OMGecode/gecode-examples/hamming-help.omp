; OM File Header - Saved 2010/06/17 10:35:05
; (6.010006 :patc (om-make-point 30 130) (om-make-point 50 50) (om-make-point 1202 596) "" 183 0 "2010/01/28 21:46:16" "2010/02/06 0:26:09")
; End File Header
(in-package :om)(load-lib-for (quote ("OMGecode")))(setf *om-current-persistent* (om-load-patch1 "hamming-help" (quote ((om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 591 220) (om-make-point 42 30) 5000 "5000" nil) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 515 328) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "LEGATO" 0))) (om-make-point 51 427) (om-make-point 971 151) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6700 7700 7300 5200 4400 8800) (6000 6700 7700 7300) (6000 6700 5200 4400) (6000 6700 8800) (6000 7700 5200 8800) (6000 7700 4400) (6000 7300 5200) (6000 7300 4400 8800) (6700 7700 5200) (6700 7700 4400 8800) (6700 7300 5200 8800) (6700 7300 4400) (7700 7300 5200 4400) (7700 7300 8800) (5200 4400 8800) (5200 4400 8800))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 20) (om-make-point 664 352) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "LCHAN" (list 1)))) (om-make-point 305 231) (om-make-point 65 144) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700 7700 7300 5200 4400 8800)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) thechord) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 700 352) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 407 354) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 108 34) (quote "nombre d'accords") "" (om-make-point 438 81) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 548 85) (om-make-point 28 30) 16 "16" nil) (om-load-boxcomment "comment" (om-make-point 108 34) (quote "distance") "" (om-make-point 306 98) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 418 113) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote genfun) "HAMMING-G2" (quote hamming-g) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "NNOTES" nil) (om-load-inputfun (quote input-funbox) "no documentation" "DISTANCE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "NCHORDS" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SOLUTIONS" nil) (om-load-inputfun (quote input-keyword) "Choose from this list (:timelimit)" "Keyword input" (quote :timelimit)))) (om-make-point 479 241) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 733 91) (quote "code de hamming pour générer des accords differents") "" (om-make-point 61 0) nil (om-make-color 0.088718415 0.0 1.0) (om-make-font "Bank Gothic" 36 :family "Bank Gothic" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 182 36) (quote "nombre de solutions") "" (om-make-point 573 180) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 108 34) (quote "nombre de notes") "" (om-make-point 47 103) nil (om-make-color 0 0 0) (om-make-font "Times" 14 :family "Times" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 547 189) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 159 118) (om-make-point 21 30) 7 "7" nil))) (quote ((9 0 1 0 nil 0) (4 0 2 1 nil 0) (3 1 4 0 nil 0) (1 0 4 1 nil 0) (14 0 9 0 nil 0) (8 0 9 1 nil 0) (6 0 9 2 nil 0) (13 0 9 3 nil 0) (0 0 9 4 nil 0))) nil 6.010006))
